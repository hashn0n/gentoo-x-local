diff --git a/kernel/drv/oss_usb/ossusb_audio.c b/kernel/drv/oss_usb/ossusb_audio.c
index c6631c9..6372c06 100644
--- a/kernel/drv/oss_usb/ossusb_audio.c
+++ b/kernel/drv/oss_usb/ossusb_audio.c
@@ -86,11 +86,15 @@ write_control_value (ossusb_devc * devc, udi_endpoint_handle_t * endpoint,
 				 buf,	// buffer
 				 l,	// buflen
 				 OSS_HZ);
+#if 0
   if (len < 0)
     {
       cmn_err (CE_WARN, "Endpoint control write error %d\n", len);
       return OSS_EIO;
     }
+#else
+  if (len < 0) len = 3;
+#endif
 
   return len;
 }
@@ -858,11 +862,9 @@ rec_callback (udi_usb_request_t * request, void *arg)
       return;
     }
 
-  oss_audio_inc_byte_counter (dmap, len);
-  oss_audio_inputintr (portc->audio_dev, AINTR_NO_POINTER_UPDATES);
-#ifdef linux
+  oss_audio_inputintr (portc->audio_dev, AINTR_NO_POINTER_UPDATES | AINTR_LOCALQUEUE);
   start_input (portc->audio_dev, portc->devc, portc);
-#endif
+  oss_audio_inc_byte_counter (dmap, len);
 }
 
 #if 0
@@ -962,14 +964,10 @@ feed_output (int dev, ossusb_devc * devc, ossusb_portc * portc)
   adev_p adev = audio_engines[dev];
   dmap_p dmap = adev->dmap_out;
 
-  MUTEX_ENTER_IRQDISABLE (devc->mutex, flags);
-
   if (portc->stopping)
-    {
-      MUTEX_EXIT_IRQRESTORE (devc->mutex, flags);
-      return 0;
-    }
+    return 0;
 
+  MUTEX_ENTER_IRQDISABLE (devc->mutex, flags);
   pn = portc->curr_datapipe;
   portc->curr_datapipe = (portc->curr_datapipe + 1) % NR_DATAPIPES;
 
@@ -994,8 +992,7 @@ start_input (int dev, ossusb_devc * devc, ossusb_portc * portc)
 {
   int frag, err;
   oss_native_word flags;
-  adev_p adev = audio_engines[dev];
-  dmap_p dmap = adev->dmap_in;
+  int pn;
 
   if (portc->stopping)
     return;
@@ -1003,10 +1000,12 @@ start_input (int dev, ossusb_devc * devc, ossusb_portc * portc)
   MUTEX_ENTER_IRQDISABLE (devc->mutex, flags);
   frag = 0;
 
+  pn = portc->curr_datapipe;
+  portc->curr_datapipe = (portc->curr_datapipe + 1) % NR_DATAPIPES;
   if ((err =
-       udi_usb_submit_request (portc->datapipe[0], rec_callback, portc,
+       udi_usb_submit_request (portc->datapipe[pn], rec_callback, portc,
 			       portc->endpoint_handle, UDI_USBXFER_ISO_READ,
-			       dmap->dmabuf + frag * portc->fragment_size,
+			       portc->tmp_buf[pn],
 			       portc->fragment_size)) < 0)
     {
       cmn_err (CE_WARN, "oss usbaudio: Read transfer error %d\n", err);
@@ -1040,7 +1039,7 @@ usbaudio_trigger (int dev, int state)
       else if (!(state & PCM_ENABLE_OUTPUT))
 	{
 	  portc->stopping = 1;
-#if 1
+#if 0
 	  udi_usb_cancel_request (portc->datapipe[0]);
 	  udi_usb_cancel_request (portc->datapipe[1]);
 #endif
@@ -1055,15 +1054,16 @@ usbaudio_trigger (int dev, int state)
 	{
 	  portc->prepared_modes &= ~PCM_ENABLE_INPUT;
 	  portc->stopping = 0;
+	  portc->curr_datapipe = 0;
+
+	  start_input (dev, devc, portc);
 	  start_input (dev, devc, portc);
 	}
       else if (!(state & PCM_ENABLE_INPUT))
 	{
 	  portc->stopping = 1;
-#if 0
 	  udi_usb_cancel_request (portc->datapipe[0]);
 	  udi_usb_cancel_request (portc->datapipe[1]);
-#endif
 	  portc->curr_datapipe = 0;
 	}
     }
